name: üî• –°–±–æ—Ä–∫–∞, —Ç–µ—Å—Ç—ã –∏ –¥–µ–ø–ª–æ–π

on:
  push:
    branches:
      - '**'

jobs:
  user-service-test:
    runs-on: ubuntu-latest
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        run: |
          git clone https://github.com/heavenboards/user-service.git
          cd ./user-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          ls
          cd ./user-service
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∏ —Ç–µ—Å—Ç—ã
        run: |
          ls
          cd ./user-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw clean package
  user-service-dockerize:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: user-service-test
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏—Ç —Å–∞–±–º–æ–¥—É–ª–∏
        run: |
          git clone https://github.com/heavenboards/user-service.git
          cd ./user-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          cd ./user-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º install + docker build + docker push
        run: |
          cd ./user-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw -DskipTests -DregistryUsername=${{ vars.CI_REGISTRY_USER }} -DregistryPassword='${{ vars.CI_REGISTRY_PASSWORD }}' clean install
  user-service-deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: user-service-dockerize
    steps:
      - name: üëâüèº –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sshpass
        run: sudo apt update && sudo apt install -y sshpass

      - name: üëâüèº –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          echo Connected to the remote server ${{ vars.REMOTE_SERVER_HOST }}!"

      - name: üëâüèº –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          docker stop ${{ vars.CI_REGISTRY_USER }}_${{ vars.USER_SERVICE_REPOSITORY_NAME }} || true &&
          docker rm ${{ vars.CI_REGISTRY_USER }}_${{ vars.USER_SERVICE_REPOSITORY_NAME }} || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker rmi ${{ vars.CI_REGISTRY_USER }}/${{ vars.USER_SERVICE_REPOSITORY_NAME }}:1.0.0 -f || true &&
          docker pull ${{ vars.CI_REGISTRY_USER }}/${{ vars.USER_SERVICE_REPOSITORY_NAME }}:1.0.0 || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker network create -d bridge ${{ vars.DOCKER_NETWORK_NAME }} || true &&
          docker run -d --rm -e REMOTE_SERVER_HOST=${{ vars.REMOTE_SERVER_HOST }} -e DOCKER_NETWORK_NAME=${{ vars.DOCKER_NETWORK_NAME }} -e POSTGRES_DATABASE_USERNAME=${{ vars.POSTGRES_DATABASE_USERNAME }} -e POSTGRES_DATABASE_PASSWORD=${{ vars.POSTGRES_DATABASE_PASSWORD }} -e JWT_SECRET=${{ vars.JWT_SECRET }} --name ${{ vars.CI_REGISTRY_USER }}_${{ vars.USER_SERVICE_REPOSITORY_NAME }} --network ${{ vars.DOCKER_NETWORK_NAME }} -p ${{ vars.USER_SERVICE_CONTAINER_PORT }}:${{ vars.USER_SERVICE_CONTAINER_PORT }} ${{ vars.CI_REGISTRY_USER }}/${{ vars.USER_SERVICE_REPOSITORY_NAME }}:1.0.0"
  project-service-test:
    runs-on: ubuntu-latest
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        run: |
          git clone https://github.com/heavenboards/project-service.git
          cd ./project-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          ls
          cd ./project-service
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∏ —Ç–µ—Å—Ç—ã
        run: |
          ls
          cd ./project-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw clean package
  project-service-dockerize:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: project-service-test
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏—Ç —Å–∞–±–º–æ–¥—É–ª–∏
        run: |
          git clone https://github.com/heavenboards/project-service.git
          cd ./project-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          cd ./project-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º install + docker build + docker push
        run: |
          cd ./project-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw -DskipTests -DregistryUsername=${{ vars.CI_REGISTRY_USER }} -DregistryPassword='${{ vars.CI_REGISTRY_PASSWORD }}' clean install
  project-service-deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: project-service-dockerize
    steps:
      - name: üëâüèº –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sshpass
        run: sudo apt update && sudo apt install -y sshpass

      - name: üëâüèº –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          echo Connected to the remote server ${{ vars.REMOTE_SERVER_HOST }}!"

      - name: üëâüèº –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          docker stop ${{ vars.CI_REGISTRY_USER }}_${{ vars.PROJECT_SERVICE_REPOSITORY_NAME }} || true &&
          docker rm ${{ vars.CI_REGISTRY_USER }}_${{ vars.PROJECT_SERVICE_REPOSITORY_NAME }} || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker rmi ${{ vars.CI_REGISTRY_USER }}/${{ vars.PROJECT_SERVICE_REPOSITORY_NAME }}:1.0.0 -f || true &&
          docker pull ${{ vars.CI_REGISTRY_USER }}/${{ vars.PROJECT_SERVICE_REPOSITORY_NAME }}:1.0.0 || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker network create -d bridge ${{ vars.DOCKER_NETWORK_NAME }} || true &&
          docker run -d --rm -e REMOTE_SERVER_HOST=${{ vars.REMOTE_SERVER_HOST }} -e DOCKER_NETWORK_NAME=${{ vars.DOCKER_NETWORK_NAME }} -e POSTGRES_DATABASE_USERNAME=${{ vars.POSTGRES_DATABASE_USERNAME }} -e POSTGRES_DATABASE_PASSWORD=${{ vars.POSTGRES_DATABASE_PASSWORD }} -e JWT_SECRET=${{ vars.JWT_SECRET }} --name ${{ vars.CI_REGISTRY_USER }}_${{ vars.PROJECT_SERVICE_REPOSITORY_NAME }} --network ${{ vars.DOCKER_NETWORK_NAME }} -p ${{ vars.PROJECT_SERVICE_CONTAINER_PORT }}:${{ vars.PROJECT_SERVICE_CONTAINER_PORT }} ${{ vars.CI_REGISTRY_USER }}/${{ vars.PROJECT_SERVICE_REPOSITORY_NAME }}:1.0.0"
  composer-service-test:
    runs-on: ubuntu-latest
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        run: |
          git clone https://github.com/heavenboards/composer-service.git
          cd ./composer-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          ls
          cd ./composer-service
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∏ —Ç–µ—Å—Ç—ã
        run: |
          ls
          cd ./composer-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw clean package
  composer-service-dockerize:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: composer-service-test
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏—Ç —Å–∞–±–º–æ–¥—É–ª–∏
        run: |
          git clone https://github.com/heavenboards/composer-service.git
          cd ./composer-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          cd ./composer-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º install + docker build + docker push
        run: |
          cd ./composer-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw -DskipTests -DregistryUsername=${{ vars.CI_REGISTRY_USER }} -DregistryPassword='${{ vars.CI_REGISTRY_PASSWORD }}' clean install
  composer-service-deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: composer-service-dockerize
    steps:
      - name: üëâüèº –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sshpass
        run: sudo apt update && sudo apt install -y sshpass

      - name: üëâüèº –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          echo Connected to the remote server ${{ vars.REMOTE_SERVER_HOST }}!"

      - name: üëâüèº –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          docker stop ${{ vars.CI_REGISTRY_USER }}_${{ vars.COMPOSER_SERVICE_REPOSITORY_NAME }} || true &&
          docker rm ${{ vars.CI_REGISTRY_USER }}_${{ vars.COMPOSER_SERVICE_REPOSITORY_NAME }} || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker rmi ${{ vars.CI_REGISTRY_USER }}/${{ vars.COMPOSER_SERVICE_REPOSITORY_NAME }}:1.0.0 -f || true &&
          docker pull ${{ vars.CI_REGISTRY_USER }}/${{ vars.COMPOSER_SERVICE_REPOSITORY_NAME }}:1.0.0 || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker network create -d bridge ${{ vars.DOCKER_NETWORK_NAME }} || true &&
          docker run -d --rm -e REMOTE_SERVER_HOST=${{ vars.REMOTE_SERVER_HOST }} -e DOCKER_NETWORK_NAME=${{ vars.DOCKER_NETWORK_NAME }} -e POSTGRES_DATABASE_USERNAME=${{ vars.POSTGRES_DATABASE_USERNAME }} -e POSTGRES_DATABASE_PASSWORD=${{ vars.POSTGRES_DATABASE_PASSWORD }} -e JWT_SECRET=${{ vars.JWT_SECRET }} --name ${{ vars.CI_REGISTRY_USER }}_${{ vars.COMPOSER_SERVICE_REPOSITORY_NAME }} --network ${{ vars.DOCKER_NETWORK_NAME }} -p ${{ vars.COMPOSER_SERVICE_CONTAINER_PORT }}:${{ vars.COMPOSER_SERVICE_CONTAINER_PORT }} ${{ vars.CI_REGISTRY_USER }}/${{ vars.COMPOSER_SERVICE_REPOSITORY_NAME }}:1.0.0"
  board-service-test:
    runs-on: ubuntu-latest
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        run: |
          git clone https://github.com/heavenboards/board-service.git
          cd ./board-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          ls
          cd ./board-service
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∏ —Ç–µ—Å—Ç—ã
        run: |
          ls
          cd ./board-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw clean package
  board-service-dockerize:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: board-service-test
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏—Ç —Å–∞–±–º–æ–¥—É–ª–∏
        run: |
          git clone https://github.com/heavenboards/board-service.git
          cd ./board-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          cd ./board-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º install + docker build + docker push
        run: |
          cd ./board-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw -DskipTests -DregistryUsername=${{ vars.CI_REGISTRY_USER }} -DregistryPassword='${{ vars.CI_REGISTRY_PASSWORD }}' clean install
  board-service-deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: board-service-dockerize
    steps:
      - name: üëâüèº –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sshpass
        run: sudo apt update && sudo apt install -y sshpass

      - name: üëâüèº –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          echo Connected to the remote server ${{ vars.REMOTE_SERVER_HOST }}!"

      - name: üëâüèº –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          docker stop ${{ vars.CI_REGISTRY_USER }}_${{ vars.BOARD_SERVICE_REPOSITORY_NAME }} || true &&
          docker rm ${{ vars.CI_REGISTRY_USER }}_${{ vars.BOARD_SERVICE_REPOSITORY_NAME }} || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker rmi ${{ vars.CI_REGISTRY_USER }}/${{ vars.BOARD_SERVICE_REPOSITORY_NAME }}:1.0.0 -f || true &&
          docker pull ${{ vars.CI_REGISTRY_USER }}/${{ vars.BOARD_SERVICE_REPOSITORY_NAME }}:1.0.0 || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker network create -d bridge ${{ vars.DOCKER_NETWORK_NAME }} || true &&
          docker run -d --rm -e REMOTE_SERVER_HOST=${{ vars.REMOTE_SERVER_HOST }} -e DOCKER_NETWORK_NAME=${{ vars.DOCKER_NETWORK_NAME }} -e POSTGRES_DATABASE_USERNAME=${{ vars.POSTGRES_DATABASE_USERNAME }} -e POSTGRES_DATABASE_PASSWORD=${{ vars.POSTGRES_DATABASE_PASSWORD }} -e JWT_SECRET=${{ vars.JWT_SECRET }} --name ${{ vars.CI_REGISTRY_USER }}_${{ vars.BOARD_SERVICE_REPOSITORY_NAME }} --network ${{ vars.DOCKER_NETWORK_NAME }} -p ${{ vars.BOARD_SERVICE_CONTAINER_PORT }}:${{ vars.BOARD_SERVICE_CONTAINER_PORT }} ${{ vars.CI_REGISTRY_USER }}/${{ vars.BOARD_SERVICE_REPOSITORY_NAME }}:1.0.0"
  task-service-test:
    runs-on: ubuntu-latest
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        run: |
          git clone https://github.com/heavenboards/task-service.git
          cd ./task-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          ls
          cd ./task-service
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∏ —Ç–µ—Å—Ç—ã
        run: |
          ls
          cd ./task-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw clean package
  task-service-dockerize:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: task-service-test
    steps:
      - name: üëâüèº –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        uses: actions/checkout@v3

      - name: üëâüèº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏—Ç —Å–∞–±–º–æ–¥—É–ª–∏
        run: |
          git clone https://github.com/heavenboards/task-service.git
          cd ./task-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'

      - name: üëâüèº –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üëâüèº –î–µ–ª–∞–µ–º maven wrapper –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        run: |
          cd ./task-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          chmod +x ./mvnw

      - name: üëâüèº –ó–∞–ø—É—Å–∫–∞–µ–º install + docker build + docker push
        run: |
          cd ./task-service
          git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"
          git submodule update --init --remote --recursive
          git submodule foreach 'git checkout ${GITHUB_REF##*/} && git pull || echo "In ${sm_path} branch ${GITHUB_REF##*/} not found"'
          ./mvnw -DskipTests -DregistryUsername=${{ vars.CI_REGISTRY_USER }} -DregistryPassword='${{ vars.CI_REGISTRY_PASSWORD }}' clean install
  task-service-deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: task-service-dockerize
    steps:
      - name: üëâüèº –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sshpass
        run: sudo apt update && sudo apt install -y sshpass

      - name: üëâüèº –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          echo Connected to the remote server ${{ vars.REMOTE_SERVER_HOST }}!"

      - name: üëâüèº –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        run: sshpass -p ${{ vars.REMOTE_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ vars.REMOTE_SERVER_HOST }} "
          docker stop ${{ vars.CI_REGISTRY_USER }}_${{ vars.TASK_SERVICE_REPOSITORY_NAME }} || true &&
          docker rm ${{ vars.CI_REGISTRY_USER }}_${{ vars.TASK_SERVICE_REPOSITORY_NAME }} || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker rmi ${{ vars.CI_REGISTRY_USER }}/${{ vars.TASK_SERVICE_REPOSITORY_NAME }}:1.0.0 -f || true &&
          docker pull ${{ vars.CI_REGISTRY_USER }}/${{ vars.TASK_SERVICE_REPOSITORY_NAME }}:1.0.0 || true &&
          docker rmi $(docker images -f "dangling=true" -q) &&
          docker network create -d bridge ${{ vars.DOCKER_NETWORK_NAME }} || true &&
          docker run -d --rm -e REMOTE_SERVER_HOST=${{ vars.REMOTE_SERVER_HOST }} -e DOCKER_NETWORK_NAME=${{ vars.DOCKER_NETWORK_NAME }} -e POSTGRES_DATABASE_USERNAME=${{ vars.POSTGRES_DATABASE_USERNAME }} -e POSTGRES_DATABASE_PASSWORD=${{ vars.POSTGRES_DATABASE_PASSWORD }} -e JWT_SECRET=${{ vars.JWT_SECRET }} --name ${{ vars.CI_REGISTRY_USER }}_${{ vars.TASK_SERVICE_REPOSITORY_NAME }} --network ${{ vars.DOCKER_NETWORK_NAME }} -p ${{ vars.TASK_SERVICE_CONTAINER_PORT }}:${{ vars.TASK_SERVICE_CONTAINER_PORT }} ${{ vars.CI_REGISTRY_USER }}/${{ vars.TASK_SERVICE_REPOSITORY_NAME }}:1.0.0"
